{"/home/travis/build/npmtest/node-npmtest-node-core-audio/test.js":"/* istanbul instrument in package npmtest_node_core_audio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-core-audio/lib.npmtest_node_core_audio.js":"/* istanbul instrument in package npmtest_node_core_audio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_core_audio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_core_audio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-core-audio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-core-audio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_core_audio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_core_audio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_core_audio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_core_audio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_core_audio.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_core_audio.__dirname + '/lib.npmtest_node_core_audio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-core-audio/node_modules/node-core-audio/node-core-audio.js":"//////////////////////////////////////////////////////////////////////////\n// node-core-audio - main module\n//////////////////////////////////////////////////////////////////////////\n//\n// Main javascript audio API\n/* ----------------------------------------------------------------------\n\t\t\t\t\t\t\t\t\t\t\t\t\tObject Structures\n-------------------------------------------------------------------------\n\t\n*/\n//////////////////////////////////////////////////////////////////////////\n// Node.js Exports\nvar globalNamespace = {};\n(function (exports) {\n\texports.createNewAudioEngine = function( options ) {\n\t\tnewAudioEngine= new AudioEngine( options );\n\t\treturn newAudioEngine;\n\t};\n}(typeof exports === 'object' && exports || globalNamespace));\n\nvar FFT = require(\"fft\");\n\n\n//////////////////////////////////////////////////////////////////////////\n// Namespace (lol)\nvar SHOW_DEBUG_PRINTS = true;\nvar MAX_SUPPORTED_CHANNELS = 6;\t\t\t\t\t\t\t\t\t\t\t\t\t// We need to allocate our process audio for the max channels, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// so we have to set some reasonable limit\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nvar log = function( a ) { if(SHOW_DEBUG_PRINTS) console.log(a); };\t\t\t\t// A log function we can turn off\nvar exists = function(a) { return typeof(a) == \"undefined\" ? false : true; };\t// Check whether a variable exists\n\n\n//////////////////////////////////////////////////////////////////////////\n// Constructor\nfunction AudioEngine( options ) {\n\tvar audioEngineImpl = require( __dirname + \"/build/Release/NodeCoreAudio\" );\n\n\tvar defaultOptions = {\n\t\tinputChannels: 1,\n\t\toutputChannels: 2,\n\t\tframesPerBuffer: 1024,\n\t\tuseMicrophone: true\n\t};\n\t\n    this.options = options || defaultOptions;\n\tthis.audioEngine = audioEngineImpl.createAudioEngine( this.options );\n\tthis.options = this.audioEngine.getOptions();\n\n\tthis.audioStreamer;\n\t\n\tthis.processingCallbacks = [];\n\tthis.uiUpdateCallbacks = [];\n\t\n\tthis.outputBuffer = [];\n\tthis.tempBuffer = [];\n\tthis.processBuffer = [];\n\n\tthis.fft = new FFT.complex( this.audioEngine.getOptions().framesPerBuffer, false );\n\tthis.fftBuffer = [];\n\t\n\tvar _this = this;\n\n\tfunction validateOutputBufferStructure( buffer ) {\n\t\tif( buffer === undefined ) {\n\t\t\tconsole.log( \"Audio processing function didn't return an output buffer\" );\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif( !_this.audioEngine.getOptions().interleaved ) {\n\n\t\t\tif( buffer.length > _this.options.inputChannels ) {\n\t\t\t\tconsole.log( \"Output buffer has info for too many channels\" );\n\t\t\t\treturn false;\n\t\t\t} else if( buffer.length < _this.options.inputChannels ) {\n\t\t\t\tconsole.log( \"Output buffer doesn't have data for enough channels\" );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif( typeof(buffer[0]) != \"object\" ) { \n\t\t\t\tconsole.log( \"Output buffer not setup correctly, buffer[0] isn't an array\" );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif( typeof(buffer[0][0]) != \"number\" ) {\n\t\t\t\tconsole.log( \"Output buffer not setup correctly, buffer[0][0] isn't a number\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif( typeof(buffer[0]) != \"number\" ) {\n\t\t\t\tconsole.log( \"Output buffer not setup correctly, buffer[0] isn't a number\" );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Allocate a processing buffer for each of our channels\n\tfor( var iChannel = 0; iChannel<MAX_SUPPORTED_CHANNELS; ++iChannel ) {\n\t\tthis.processBuffer[iChannel] = [];\n\t}\n\t\n\t// Start polling the audio engine for data as fast as we can\t\n\tvar _this = this;\n\n\tthis.processAudio = this.getProcessAudio();\n\n\tsetInterval( function() {\n\t\tif (_this.audioEngine.isBufferEmpty()) {\n\t\t\t// Try to process audio\n\t\t\tvar input = _this.audioEngine.read();\n\n\t\t\tvar outputBuffer = _this.processAudio( input );\n\n\t\t\tif( validateOutputBufferStructure(outputBuffer) )\n\t\t\t\t_this.audioEngine.write( outputBuffer );\n\t\t\t\n\t\t\t// Call our UI updates now that all the DSP work has been done\n\t\t\tfor( var iUpdate=0; iUpdate < _this.uiUpdateCallbacks.length; ++iUpdate ) {\n\t\t\t\t_this.uiUpdateCallbacks[iUpdate]();\n\t\t\t}\n\t\t}\n\t}, 1 );\n} // end AudioEngine()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns our main audio processing function\nAudioEngine.prototype.getProcessAudio = function() {\n\tvar _this = this;\n\n\tvar options = this.audioEngine.getOptions(),\n\t\tnumChannels = options.inputChannels,\n\t\tfftBuffer = this.fftBuffer;\n\t\n\tvar processAudio = function( inputBuffer ) {\t\n\n\t\t// If we don't have any processing callbacks, just get out\n\t\tif( _this.processingCallbacks.length == 0 )\n\t\t\treturn inputBuffer;\n\t\t\t\n\t\tvar processBuffer = inputBuffer;\n\t\t\t\n\t\t//if( !_this.options.interleaved )\n\t\t//\tdeInterleave( inputBuffer, processBuffer, _this.options.framesPerBuffer, numChannels );\n\n\t\t// Call through to all of our processing callbacks\n\t\tfor( var iCallback = 0; iCallback < _this.processingCallbacks.length; ++iCallback ) {\n\t\t\tprocessBuffer = _this.processingCallbacks[iCallback]( processBuffer );\n\t\t} // end for each callback\n\t\t\n\t\t\n\t\tif( typeof(_this.audioStreamer) != \"undefined\" ) {\n\t\t\t_this.audioStreamer.streamAudio( processBuffer, _this.options.framesPerBuffer, numChannels );\n\t\t}\n\t\t\n\t\t// Return our output audio to the sound card\n\t\treturn processBuffer;\n\t} // end processAudio()\n\t\n\treturn processAudio;\n} // end AudioEngine.getProcessAudio()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Get the engine's options \nAudioEngine.prototype.getOptions = function() {\n\tthis.options = this.audioEngine.getOptions();\n\treturn this.options;\n} // end AudioEngine.getOptions()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Get the engine's options \nAudioEngine.prototype.setOptions = function( options ) {\n\tthis.audioEngine.setOptions( options );\n\tthis.options = this.audioEngine.getOptions();\n} // end AudioEngine.setOptions()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Add a processing callback \nAudioEngine.prototype.createAudioHub = function( port ) {\n\tthis.audioStreamer = require(\"audio-streamer\").createNewAudioStreamer( port );\n} // end AudioEngine.createAudiohub()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Add a processing callback \nAudioEngine.prototype.addAudioCallback = function( callback ) {\n\tthis.processingCallbacks.push( callback );\n} // end AudioEngine.addAudioCallback()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Add a UI update callback\nAudioEngine.prototype.addUpdateCallback = function( callback ) {\n\tthis.uiUpdateCallbacks.push( callback );\n} // end AudioEngine.addUpdateCallback()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns whether the audio engine is active \nAudioEngine.prototype.isActive = function() {\n\treturn this.audioEngine.isActive();\n} // end AudioEngine.isActive()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns the sample rate of the audio engine \nAudioEngine.prototype.getSampleRate = function() {\n\treturn this.audioEngine.getSampleRate();\n} // end AudioEngine.getSampleRate()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns the index of the input audio device \nAudioEngine.prototype.getInputDeviceIndex = function() {\n\treturn this.audioEngine.getInputDeviceIndex();\n} // end AudioEngine.getInputDeviceIndex()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns the index of the output audio device \nAudioEngine.prototype.getOutputDeviceIndex = function() {\n\treturn this.audioEngine.getOutputDeviceIndex();\n} // end AudioEngine.getOutputDeviceIndex()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns the name of a given device \nAudioEngine.prototype.getDeviceName = function( deviceId ) {\n\treturn this.audioEngine.getDeviceName( deviceId );\n} // end AudioEngine.getDeviceName()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns the total number of audio devices\nAudioEngine.prototype.getNumDevices = function() {\n\treturn this.audioEngine.getNumDevices();\n} // end AudioEngine.getNumDevices()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Sets the input audio device\nAudioEngine.prototype.setInputDevice = function( deviceId ) {\n\treturn this.audioEngine.setInputDevice( deviceId );\n} // end AudioEngine.setInputDevice()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Sets the output audio device\nAudioEngine.prototype.setOutputDevice = function( deviceId ) {\n\treturn this.audioEngine.setOutputDevice( deviceId );\n} // end AudioEngine.setOutputDevice()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns the number of input channels\nAudioEngine.prototype.getNumInputChannels = function() {\n\treturn this.audioEngine.getNumInputChannels();\n} // end AudioEngine.getNumInputChannels()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Returns the number of output channels\nAudioEngine.prototype.getNumOutputChannels = function() {\n\treturn this.audioEngine.getNumOutputChannels();\n} // end AudioEngine.getNumOutputChannels()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Read audio samples from the sound card \nAudioEngine.prototype.read = function() {\n\treturn this.audioEngine.read();\n} // end AudioEngine.read()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Write some audio samples to the sound card\nAudioEngine.prototype.write = function() {\n\tthis.audioEngine.write();\n} // end AudioEngine.write()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Splits a 1d buffer into its channel components\nfunction deInterleave( inputBuffer, outputBuffer, numSamplesPerBuffer, numChannels ) {\n\t// If the number of channels doesn't match, setup the output buffer\n\tif( inputBuffer.length != outputBuffer.length ) {\n\t\toutputBuffer = undefined;\n\t\toutputBuffer = [];\n\t\tfor( var iChannel=0; iChannel<inputBuffer.length; ++iChannel )\n\t\t\toutputBuffer[iChannel] = [];\n\t}\n\n\tif( numChannels < 2 ) {\n\t\toutputBuffer[0] = inputBuffer;\n\t\treturn;\n\t}\n\n\tfor( var iChannel = 0; iChannel < numChannels; iChannel += numChannels ) {\n\t\tfor( var iSample = 0; iSample < numSamplesPerBuffer; ++iSample ) {\n\t\t\toutputBuffer[iChannel][iSample] = inputBuffer[iSample + iChannel];\n\t\t} // end for each sample\t\t\n\t} // end for each channel\n} // end deInterleave()\n\n\n//////////////////////////////////////////////////////////////////////////\n// Joins multidimensional array into single buffer\nfunction interleave( inputBuffer, outputBuffer, numSamplesPerBuffer, numChannels ) {\n\tif( numChannels < 2 ) {\n\t\toutputBuffer = inputBuffer;\n\t\treturn;\n\t}\n\n\t// If the number of channels doesn't match, setup the output buffer\n\tif( inputBuffer.length != outputBuffer.length ) {\n\t\toutputBuffer = undefined;\n\t\toutputBuffer = [];\n\t\tfor( var iChannel=0; iChannel<inputBuffer.length; ++iChannel )\n\t\t\toutputBuffer[iChannel] = [];\n\t}\n\n\tfor( var iChannel = 0; iChannel < numChannels; ++iChannel ) {\n\t\tif( inputBuffer[iChannel] === undefined ) break;\n\n\t\tfor( var iSample = 0; iSample < numSamplesPerBuffer; iSample += numChannels ) {\n\t\t\toutputBuffer[iSample + iChannel] = inputBuffer[iChannel][iSample];\n\t\t} // end for each sample position\t\t\n\t} // end for each channel\t\n\n} // end interleave()\n"}